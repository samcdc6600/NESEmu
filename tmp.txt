<p>Some 6502 references call this the "B flag", though it does not represent an actual CPU register. Two interrupts (/IRQ and /NMI) and two instructions (PHP and BRK) push the flags to the stack. In the byte pushed, bit 5 is always set to 1, and bit 4 is 1 if from an instruction (PHP or BRK) or 0 if from an interrupt line being pulled low (/IRQ or /NMI). This is the only time and place where the B flag actually exists: not in the status register itself, but in bit 4 of the copy that is written to the stack." Note that the flags struct is defined as: </p><div class="fragment"><input id="collapsible31" class="toggle" type="checkbox"><label for="collapsible31" class="lbl-toggle">See source</label><div class="collapsible-content"><div class="content-inner"><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span></div><div class="line">{</div><div class="line"> <span class="keyword">struct</span></div><div class="line"> {</div><div class="line"> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> C : 1; <span class="comment">// Carry ~===&lt;( Lowest order byte )&gt;===~</span></div><div class="line"> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> Z : 1; <span class="comment">// Zero</span></div><div class="line"> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> I : 1; <span class="comment">// Interrupt Disable</span></div><div class="line"> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> D : 1; <span class="comment">// Decimal</span></div><div class="line"> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> s0 : 1; <span class="comment">// No CPU effect. (refere to the comment at the</span></div><div class="line"> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> s1 : 1; <span class="comment">// top of the file.)</span></div><div class="line"> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> V : 1; <span class="comment">// Overflow</span></div><div class="line"> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> N : 1; <span class="comment">// Negative ~===&lt;( Highest order byte )&gt;===~</span></div><div class="line"> }u;</div><div class="line"> <a class="code" href="namespacearchitecturalState.html#a33d651fb3718743ef859655ac8f6feaa">isaReg</a> flags;</div><div class="line">}Status; </div></div><! fragment --> <div class="fragment wrap-collapsible"><div class="line"><a name="l00249"></a><span class="lineno"> 249</span>&#160;{</div><div class="line"><a name="l00250"></a><span class="lineno"> 250</span>&#160; <a class="code" href="instructions_8hpp.html#a4c2a0d9ef0872443b7f80ed4d3eb7b40">pushToStack</a>(<a class="code" href="namespacearchitecturalState.html#ada1e940d3741c847fce381789e719acf">architecturalState::A</a>);</div><div class="line"><a name="l00251"></a><span class="lineno"> 251</span>&#160; <a class="code" href="namespacearchitecturalState.html#a2e86e6e2bc460f6445cb7da168aa7cf1">architecturalState::PC</a> += 1;</div><div class="line"><a name="l00252"></a><span class="lineno"> 252</span>&#160; <a class="code" href="namespacearchitecturalState.html#a8d56f4bc588bc74d6c0ca8553adb7f47">architecturalState::cycles</a> += 3;</div><div class="line"><a name="l00253"></a><span class="lineno"> 253</span>&#160;}</div><div class="ttc" id="namespacearchitecturalState_html_a2e86e6e2bc460f6445cb7da168aa7cf1"><div class="ttname"><a href="namespacearchitecturalState.html#a2e86e6e2bc460f6445cb7da168aa7cf1">architecturalState::PC</a></div><div class="ttdeci">memory::address PC</div><div class="ttdef"><b>Definition:</b> cpu.cpp:22</div></div>
